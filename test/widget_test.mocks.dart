// Mocks generated by Mockito 5.0.9 from annotations
// in t700kilos/test/widget_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:t700kilos/clock.dart' as _i2;
import 'package:t700kilos/record.dart' as _i5;
import 'package:t700kilos/storage.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeDateTime extends _i1.Fake implements DateTime {}

/// A class which mocks [Clock].
///
/// See the documentation for Mockito's code generation for more information.
class MockClock extends _i1.Mock implements _i2.Clock {
  MockClock() {
    _i1.throwOnMissingStub(this);
  }

  @override
  DateTime get now =>
      (super.noSuchMethod(Invocation.getter(#now), returnValue: _FakeDateTime())
          as DateTime);
}

/// A class which mocks [Storage].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorage extends _i1.Mock implements _i3.Storage {
  MockStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.Record>> loadRecords() =>
      (super.noSuchMethod(Invocation.method(#loadRecords, []),
              returnValue: Future<List<_i5.Record>>.value(<_i5.Record>[]))
          as _i4.Future<List<_i5.Record>>);
  @override
  _i4.Future<void> storeRecords(List<_i5.Record>? records) =>
      (super.noSuchMethod(Invocation.method(#storeRecords, [records]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> storeSingleRecord(_i5.Record? record) =>
      (super.noSuchMethod(Invocation.method(#storeSingleRecord, [record]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> exportRecords() =>
      (super.noSuchMethod(Invocation.method(#exportRecords, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Future<bool> importRecords() =>
      (super.noSuchMethod(Invocation.method(#importRecords, []),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
}
